syntax = "proto3";

package raft;

service Server {
    rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse) {}
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse) {}
}

// reasons for why appendEntries and requestVote might fail
enum ErrorCode {
    NONE = 0;
    TERM_ERROR = 1;
    LOG_ERROR = 2;
    // added later
    AE_OLDTERM = 3;
    AE_LOGMISMATCH = 4;
}

// data stored per entry
message Entry {
    int32 term = 1;
    int32 index = 2;
    string command = 3;
}

message RequestVoteRequest {
    int32 term = 1;
    int32 candidateId = 2;
    int32 lastLogIndex = 3;
    int32 lastLogTerm = 4;
}

message RequestVoteResponse {
    int32 term = 1;
    bool voteGranted = 2;
    // optional: error code on why voteGranted is false
    // Values are optional by default
    ErrorCode reason = 3;
    int32 id = 4;
}

message AppendEntriesRequest {
    int32 term = 1;
    int32 leaderId = 2;
    int32 prevLogIndex = 3;
    int32 prevLogTerm = 4;
    int32 leaderCommit = 5;
    repeated Entry entries = 6;
}

message AppendEntriesResponse {
    int32 term = 1;
    bool success = 2;
    // optional: error code on why fail
    // Values are optional by default
    ErrorCode reason = 3;
    int32 id = 4;
}
